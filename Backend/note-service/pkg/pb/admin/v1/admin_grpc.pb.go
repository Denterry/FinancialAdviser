// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: admin/v1/admin.proto

package adminpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AdminTweetService_CreateTweet_FullMethodName          = "/admin.v1.AdminTweetService/CreateTweet"
	AdminTweetService_GetTweet_FullMethodName             = "/admin.v1.AdminTweetService/GetTweet"
	AdminTweetService_ListTweets_FullMethodName           = "/admin.v1.AdminTweetService/ListTweets"
	AdminTweetService_UpdateTweet_FullMethodName          = "/admin.v1.AdminTweetService/UpdateTweet"
	AdminTweetService_DeleteTweet_FullMethodName          = "/admin.v1.AdminTweetService/DeleteTweet"
	AdminTweetService_GetTweetsBySymbol_FullMethodName    = "/admin.v1.AdminTweetService/GetTweetsBySymbol"
	AdminTweetService_GetTweetsBySentiment_FullMethodName = "/admin.v1.AdminTweetService/GetTweetsBySentiment"
)

// AdminTweetServiceClient is the client API for AdminTweetService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// --- SERVICE ---
type AdminTweetServiceClient interface {
	// CreateTweet creates a new tweet
	CreateTweet(ctx context.Context, in *CreateTweetRequest, opts ...grpc.CallOption) (*CreateTweetResponse, error)
	// GetTweet retrieves a tweet by ID
	GetTweet(ctx context.Context, in *GetTweetRequest, opts ...grpc.CallOption) (*GetTweetResponse, error)
	// ListTweets retrieves tweets with optional filtering
	ListTweets(ctx context.Context, in *ListTweetsRequest, opts ...grpc.CallOption) (*ListTweetsResponse, error)
	// UpdateTweet updates an existing tweet
	UpdateTweet(ctx context.Context, in *UpdateTweetRequest, opts ...grpc.CallOption) (*UpdateTweetResponse, error)
	// DeleteTweet removes a tweet
	DeleteTweet(ctx context.Context, in *DeleteTweetRequest, opts ...grpc.CallOption) (*DeleteTweetResponse, error)
	// GetTweetsBySymbol retrieves tweets mentioning a specific financial symbol
	GetTweetsBySymbol(ctx context.Context, in *GetTweetsBySymbolRequest, opts ...grpc.CallOption) (*GetTweetsBySymbolResponse, error)
	// GetTweetsBySentiment retrieves tweets with specific sentiment
	GetTweetsBySentiment(ctx context.Context, in *GetTweetsBySentimentRequest, opts ...grpc.CallOption) (*GetTweetsBySentimentResponse, error)
}

type adminTweetServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAdminTweetServiceClient(cc grpc.ClientConnInterface) AdminTweetServiceClient {
	return &adminTweetServiceClient{cc}
}

func (c *adminTweetServiceClient) CreateTweet(ctx context.Context, in *CreateTweetRequest, opts ...grpc.CallOption) (*CreateTweetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateTweetResponse)
	err := c.cc.Invoke(ctx, AdminTweetService_CreateTweet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminTweetServiceClient) GetTweet(ctx context.Context, in *GetTweetRequest, opts ...grpc.CallOption) (*GetTweetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTweetResponse)
	err := c.cc.Invoke(ctx, AdminTweetService_GetTweet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminTweetServiceClient) ListTweets(ctx context.Context, in *ListTweetsRequest, opts ...grpc.CallOption) (*ListTweetsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListTweetsResponse)
	err := c.cc.Invoke(ctx, AdminTweetService_ListTweets_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminTweetServiceClient) UpdateTweet(ctx context.Context, in *UpdateTweetRequest, opts ...grpc.CallOption) (*UpdateTweetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateTweetResponse)
	err := c.cc.Invoke(ctx, AdminTweetService_UpdateTweet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminTweetServiceClient) DeleteTweet(ctx context.Context, in *DeleteTweetRequest, opts ...grpc.CallOption) (*DeleteTweetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteTweetResponse)
	err := c.cc.Invoke(ctx, AdminTweetService_DeleteTweet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminTweetServiceClient) GetTweetsBySymbol(ctx context.Context, in *GetTweetsBySymbolRequest, opts ...grpc.CallOption) (*GetTweetsBySymbolResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTweetsBySymbolResponse)
	err := c.cc.Invoke(ctx, AdminTweetService_GetTweetsBySymbol_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminTweetServiceClient) GetTweetsBySentiment(ctx context.Context, in *GetTweetsBySentimentRequest, opts ...grpc.CallOption) (*GetTweetsBySentimentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTweetsBySentimentResponse)
	err := c.cc.Invoke(ctx, AdminTweetService_GetTweetsBySentiment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AdminTweetServiceServer is the server API for AdminTweetService service.
// All implementations must embed UnimplementedAdminTweetServiceServer
// for forward compatibility.
//
// --- SERVICE ---
type AdminTweetServiceServer interface {
	// CreateTweet creates a new tweet
	CreateTweet(context.Context, *CreateTweetRequest) (*CreateTweetResponse, error)
	// GetTweet retrieves a tweet by ID
	GetTweet(context.Context, *GetTweetRequest) (*GetTweetResponse, error)
	// ListTweets retrieves tweets with optional filtering
	ListTweets(context.Context, *ListTweetsRequest) (*ListTweetsResponse, error)
	// UpdateTweet updates an existing tweet
	UpdateTweet(context.Context, *UpdateTweetRequest) (*UpdateTweetResponse, error)
	// DeleteTweet removes a tweet
	DeleteTweet(context.Context, *DeleteTweetRequest) (*DeleteTweetResponse, error)
	// GetTweetsBySymbol retrieves tweets mentioning a specific financial symbol
	GetTweetsBySymbol(context.Context, *GetTweetsBySymbolRequest) (*GetTweetsBySymbolResponse, error)
	// GetTweetsBySentiment retrieves tweets with specific sentiment
	GetTweetsBySentiment(context.Context, *GetTweetsBySentimentRequest) (*GetTweetsBySentimentResponse, error)
	mustEmbedUnimplementedAdminTweetServiceServer()
}

// UnimplementedAdminTweetServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAdminTweetServiceServer struct{}

func (UnimplementedAdminTweetServiceServer) CreateTweet(context.Context, *CreateTweetRequest) (*CreateTweetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTweet not implemented")
}
func (UnimplementedAdminTweetServiceServer) GetTweet(context.Context, *GetTweetRequest) (*GetTweetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTweet not implemented")
}
func (UnimplementedAdminTweetServiceServer) ListTweets(context.Context, *ListTweetsRequest) (*ListTweetsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTweets not implemented")
}
func (UnimplementedAdminTweetServiceServer) UpdateTweet(context.Context, *UpdateTweetRequest) (*UpdateTweetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTweet not implemented")
}
func (UnimplementedAdminTweetServiceServer) DeleteTweet(context.Context, *DeleteTweetRequest) (*DeleteTweetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTweet not implemented")
}
func (UnimplementedAdminTweetServiceServer) GetTweetsBySymbol(context.Context, *GetTweetsBySymbolRequest) (*GetTweetsBySymbolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTweetsBySymbol not implemented")
}
func (UnimplementedAdminTweetServiceServer) GetTweetsBySentiment(context.Context, *GetTweetsBySentimentRequest) (*GetTweetsBySentimentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTweetsBySentiment not implemented")
}
func (UnimplementedAdminTweetServiceServer) mustEmbedUnimplementedAdminTweetServiceServer() {}
func (UnimplementedAdminTweetServiceServer) testEmbeddedByValue()                           {}

// UnsafeAdminTweetServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AdminTweetServiceServer will
// result in compilation errors.
type UnsafeAdminTweetServiceServer interface {
	mustEmbedUnimplementedAdminTweetServiceServer()
}

func RegisterAdminTweetServiceServer(s grpc.ServiceRegistrar, srv AdminTweetServiceServer) {
	// If the following call pancis, it indicates UnimplementedAdminTweetServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AdminTweetService_ServiceDesc, srv)
}

func _AdminTweetService_CreateTweet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTweetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminTweetServiceServer).CreateTweet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminTweetService_CreateTweet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminTweetServiceServer).CreateTweet(ctx, req.(*CreateTweetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminTweetService_GetTweet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTweetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminTweetServiceServer).GetTweet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminTweetService_GetTweet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminTweetServiceServer).GetTweet(ctx, req.(*GetTweetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminTweetService_ListTweets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTweetsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminTweetServiceServer).ListTweets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminTweetService_ListTweets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminTweetServiceServer).ListTweets(ctx, req.(*ListTweetsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminTweetService_UpdateTweet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTweetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminTweetServiceServer).UpdateTweet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminTweetService_UpdateTweet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminTweetServiceServer).UpdateTweet(ctx, req.(*UpdateTweetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminTweetService_DeleteTweet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTweetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminTweetServiceServer).DeleteTweet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminTweetService_DeleteTweet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminTweetServiceServer).DeleteTweet(ctx, req.(*DeleteTweetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminTweetService_GetTweetsBySymbol_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTweetsBySymbolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminTweetServiceServer).GetTweetsBySymbol(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminTweetService_GetTweetsBySymbol_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminTweetServiceServer).GetTweetsBySymbol(ctx, req.(*GetTweetsBySymbolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminTweetService_GetTweetsBySentiment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTweetsBySentimentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminTweetServiceServer).GetTweetsBySentiment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminTweetService_GetTweetsBySentiment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminTweetServiceServer).GetTweetsBySentiment(ctx, req.(*GetTweetsBySentimentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AdminTweetService_ServiceDesc is the grpc.ServiceDesc for AdminTweetService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AdminTweetService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "admin.v1.AdminTweetService",
	HandlerType: (*AdminTweetServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTweet",
			Handler:    _AdminTweetService_CreateTweet_Handler,
		},
		{
			MethodName: "GetTweet",
			Handler:    _AdminTweetService_GetTweet_Handler,
		},
		{
			MethodName: "ListTweets",
			Handler:    _AdminTweetService_ListTweets_Handler,
		},
		{
			MethodName: "UpdateTweet",
			Handler:    _AdminTweetService_UpdateTweet_Handler,
		},
		{
			MethodName: "DeleteTweet",
			Handler:    _AdminTweetService_DeleteTweet_Handler,
		},
		{
			MethodName: "GetTweetsBySymbol",
			Handler:    _AdminTweetService_GetTweetsBySymbol_Handler,
		},
		{
			MethodName: "GetTweetsBySentiment",
			Handler:    _AdminTweetService_GetTweetsBySentiment_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "admin/v1/admin.proto",
}
