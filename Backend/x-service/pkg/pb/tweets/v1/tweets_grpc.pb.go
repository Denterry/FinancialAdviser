// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: tweets/v1/tweets.proto

package tweetspb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TweetService_Ingest_FullMethodName           = "/tweets.v1.TweetService/Ingest"
	TweetService_ListLatestTweets_FullMethodName = "/tweets.v1.TweetService/ListLatestTweets"
	TweetService_GetTweetByID_FullMethodName     = "/tweets.v1.TweetService/GetTweetByID"
)

// TweetServiceClient is the client API for TweetService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// --- SERVICE ---
type TweetServiceClient interface {
	// Pull fresh tweets/posts from X (Twitter) or other medias and
	// persist them.  Returns how many posts were ingested in this run
	Ingest(ctx context.Context, in *IngestRequest, opts ...grpc.CallOption) (*IngestResponse, error)
	// Return the newest N tweets we have stored, ordered by fetched_at desc
	ListLatestTweets(ctx context.Context, in *ListLatestTweetsRequest, opts ...grpc.CallOption) (*ListLatestTweetsResponse, error)
	// Return one tweet by internal ID (UUID string).
	GetTweetByID(ctx context.Context, in *GetTweetByIDRequest, opts ...grpc.CallOption) (*GetTweetByIDResponse, error)
}

type tweetServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTweetServiceClient(cc grpc.ClientConnInterface) TweetServiceClient {
	return &tweetServiceClient{cc}
}

func (c *tweetServiceClient) Ingest(ctx context.Context, in *IngestRequest, opts ...grpc.CallOption) (*IngestResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IngestResponse)
	err := c.cc.Invoke(ctx, TweetService_Ingest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tweetServiceClient) ListLatestTweets(ctx context.Context, in *ListLatestTweetsRequest, opts ...grpc.CallOption) (*ListLatestTweetsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListLatestTweetsResponse)
	err := c.cc.Invoke(ctx, TweetService_ListLatestTweets_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tweetServiceClient) GetTweetByID(ctx context.Context, in *GetTweetByIDRequest, opts ...grpc.CallOption) (*GetTweetByIDResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTweetByIDResponse)
	err := c.cc.Invoke(ctx, TweetService_GetTweetByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TweetServiceServer is the server API for TweetService service.
// All implementations must embed UnimplementedTweetServiceServer
// for forward compatibility.
//
// --- SERVICE ---
type TweetServiceServer interface {
	// Pull fresh tweets/posts from X (Twitter) or other medias and
	// persist them.  Returns how many posts were ingested in this run
	Ingest(context.Context, *IngestRequest) (*IngestResponse, error)
	// Return the newest N tweets we have stored, ordered by fetched_at desc
	ListLatestTweets(context.Context, *ListLatestTweetsRequest) (*ListLatestTweetsResponse, error)
	// Return one tweet by internal ID (UUID string).
	GetTweetByID(context.Context, *GetTweetByIDRequest) (*GetTweetByIDResponse, error)
	mustEmbedUnimplementedTweetServiceServer()
}

// UnimplementedTweetServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTweetServiceServer struct{}

func (UnimplementedTweetServiceServer) Ingest(context.Context, *IngestRequest) (*IngestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ingest not implemented")
}
func (UnimplementedTweetServiceServer) ListLatestTweets(context.Context, *ListLatestTweetsRequest) (*ListLatestTweetsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListLatestTweets not implemented")
}
func (UnimplementedTweetServiceServer) GetTweetByID(context.Context, *GetTweetByIDRequest) (*GetTweetByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTweetByID not implemented")
}
func (UnimplementedTweetServiceServer) mustEmbedUnimplementedTweetServiceServer() {}
func (UnimplementedTweetServiceServer) testEmbeddedByValue()                      {}

// UnsafeTweetServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TweetServiceServer will
// result in compilation errors.
type UnsafeTweetServiceServer interface {
	mustEmbedUnimplementedTweetServiceServer()
}

func RegisterTweetServiceServer(s grpc.ServiceRegistrar, srv TweetServiceServer) {
	// If the following call pancis, it indicates UnimplementedTweetServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TweetService_ServiceDesc, srv)
}

func _TweetService_Ingest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IngestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TweetServiceServer).Ingest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TweetService_Ingest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TweetServiceServer).Ingest(ctx, req.(*IngestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TweetService_ListLatestTweets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListLatestTweetsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TweetServiceServer).ListLatestTweets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TweetService_ListLatestTweets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TweetServiceServer).ListLatestTweets(ctx, req.(*ListLatestTweetsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TweetService_GetTweetByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTweetByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TweetServiceServer).GetTweetByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TweetService_GetTweetByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TweetServiceServer).GetTweetByID(ctx, req.(*GetTweetByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TweetService_ServiceDesc is the grpc.ServiceDesc for TweetService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TweetService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tweets.v1.TweetService",
	HandlerType: (*TweetServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ingest",
			Handler:    _TweetService_Ingest_Handler,
		},
		{
			MethodName: "ListLatestTweets",
			Handler:    _TweetService_ListLatestTweets_Handler,
		},
		{
			MethodName: "GetTweetByID",
			Handler:    _TweetService_GetTweetByID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tweets/v1/tweets.proto",
}
